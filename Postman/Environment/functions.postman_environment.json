{
  "id": "0f9b545d-28fc-487a-acf7-f43a33af6c7c",
  "name": "Geocoding",
  "values": [
    {
      "key": "testLevels",
      "value": "(function(tests, inputObj, levels, typeCheck, testString) {\n  typeCheck = typeof typeCheck !== 'undefined' ? typeCheck : 'skip';\n  testString = typeof testString !== 'undefined' ? testString : '';\n\n  if (typeof levels === 'string') {\n    levels = levels.split('.');\n  }\n  if (inputObj !== null && inputObj.hasOwnProperty(levels[0])) {\n    var nextObj = inputObj[levels[0]];\n    if (levels.length === 1) {\n      testString += levels[0];\n      tests[testString + ' is present in output'] = true;\n      var check = false;\n      switch(typeCheck) {\n        case 'skip':\n          return true;\n        default:\n          tests[\"The type \" + typeCheck + \" is not supported\"] = false;\n          return false;\n        case 'string':\n          check = typeof nextObj === 'string';\n          break;\n        case 'boolean':\n          check = typeof nextObj === 'boolean';\n          break;\n        case 'array':\n          check = Array.isArray(nextObj) && nextObj.length > 0;\n          break;\n        case 'number':\n          check = !isNaN(parseFloat(nextObj)) && isFinite(nextObj);\n      }\n      tests[levels[0] + ' is ' + typeCheck] = check;\n      return check;\n    }\n    else {\n      testString += levels[0] + '.';\n      return testLevels(tests, nextObj, levels.slice(1), typeCheck, testString);\n    }\n  }\n  else {\n    if (testString === '') {\n      testString = levels[0];\n    }\n    else {\n      tests[testString.slice(0, -1) + ' is present in output'] = true;\n      testString += levels[0];\n    }\n    tests[testString + ' is present in output'] = false;\n    return false;\n  }\n})",
      "type": "text",
      "enabled": true
    },
    {
      "key": "testElements",
      "value": "(function (testLevels, tests, inputArray, levels, typeCheck) { t = {}; m = true; for (i = 0; i < inputArray.length; i++) { m = m && testLevels(t, inputArray[i], levels, typeCheck); } tests[levels + \" present and valid in each array element.\"] = m; return m; })",
      "type": "text",
      "enabled": true
    },
    {
      "key": "wait",
      "value": "(function(millis) {     var date = new Date();     var curDate = null;     do { curDate = new Date(); }     while(curDate-date < millis); })",
      "type": "text",
      "enabled": true
    },
    {
      "key": "parseJSON",
      "value": "(function (tests, jsonString){   try {     var o = JSON.parse(jsonString);     if (o && typeof o === \"object\") {       tests[\"Valid JSON returned\"] = true;       return o;     }   }   catch (e) { }   tests[\"Valid JSON returned\"] = false;   console.log(jsonString);   return {}; })",
      "type": "text",
      "enabled": true
    }
  ],
  "_postman_variable_scope": "environment",
  "_postman_exported_at": "2018-04-05T13:20:03.948Z",
  "_postman_exported_using": "Postman/6.0.10"
}